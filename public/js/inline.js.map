{"version":3,"sources":["inline.js"],"names":["w","loadCSS","href","before","media","ready","cb","doc","body","setTimeout","loadCB","ss","addEventListener","removeEventListener","ref","document","createElement","refs","getElementsByTagName","childNodes","length","sheets","styleSheets","rel","parentNode","insertBefore","nextSibling","onloadcssdefined","resolvedHref","i","exports","global","this","rp","relpreload","support","relList","supports","e","poly","links","link","getAttribute","run","setInterval","clearInterval","attachEvent","WebFontConfig","google","families","wf","src","type","async","s","window","ga","q","push","arguments","l","Date"],"mappings":"CACC,SAASA,GACT,YAEA,IAAIC,GAAU,SAAUC,EAAMC,EAAQC,GAwBrC,QAASC,GAAOC,GACf,MAAIC,GAAIC,KACAF,QAERG,YAAW,WACVJ,EAAOC,KAuBT,QAASI,KACJC,EAAGC,kBACND,EAAGE,oBAAqB,OAAQH,GAEjCC,EAAGP,MAAQA,GAAS,MAlDrB,GAEIU,GAFAP,EAAMP,EAAEe,SACRJ,EAAKJ,EAAIS,cAAe,OAE5B,IAAIb,EACHW,EAAMX,MAEF,CACJ,GAAIc,IAASV,EAAIC,MAAQD,EAAIW,qBAAsB,QAAU,IAAMC,UACnEL,GAAMG,EAAMA,EAAKG,OAAS,GAG3B,GAAIC,GAASd,EAAIe,WACjBX,GAAGY,IAAM,aACTZ,EAAGT,KAAOA,EAEVS,EAAGP,MAAQ,SAcXC,EAAO,WACNS,EAAIU,WAAWC,aAAcd,EAAMR,EAASW,EAAMA,EAAIY,cAGvD,IAAIC,GAAmB,SAAUrB,GAGhC,IAFA,GAAIsB,GAAejB,EAAGT,KAClB2B,EAAIR,EAAOD,OACRS,KACN,GAAIR,EAAQQ,GAAI3B,OAAS0B,EACxB,MAAOtB,IAGTG,YAAW,WACVkB,EAAkBrB,KAiBpB,OALIK,GAAGC,kBACND,EAAGC,iBAAkB,OAAQF,GAE9BC,EAAGgB,iBAAmBA,EACtBA,EAAkBjB,GACXC,EAGe,oBAAZmB,SACVA,QAAQ7B,QAAUA,EAGlBD,EAAEC,QAAUA,GAEO,mBAAX8B,QAAyBA,OAASC,MAG3C,SAAUhC,GAET,GAAKA,EAAEC,QAAP,CAGA,GAAIgC,GAAKhC,QAAQiC,aAsBjB,IArBAD,EAAGE,QAAU,WACX,IACE,MAAOnC,GAAEe,SAASC,cAAe,QAASoB,QAAQC,SAAU,WAC5D,MAAOC,GACP,OAAO,IAKXL,EAAGM,KAAO,WAER,IAAK,GADDC,GAAQxC,EAAEe,SAASG,qBAAsB,QACpCW,EAAI,EAAGA,EAAIW,EAAMpB,OAAQS,IAAK,CACrC,GAAIY,GAAOD,EAAOX,EACD,aAAbY,EAAKlB,KAAmD,UAA9BkB,EAAKC,aAAc,QAC/C1C,EAAEC,QAASwC,EAAKvC,KAAMuC,GACtBA,EAAKlB,IAAM,SAMZU,EAAGE,UAAW,CACjBF,EAAGM,MACH,IAAII,GAAM3C,EAAE4C,YAAaX,EAAGM,KAAM,IAC9BvC,GAAEY,kBACJZ,EAAEY,iBAAkB,OAAQ,WAC1BZ,EAAE6C,cAAeF,KAGjB3C,EAAE8C,aACJ9C,EAAE8C,YAAa,SAAU,WACvB9C,EAAE6C,cAAeF,QAItBX,MAGHe,eACEC,QAAUC,UAAY,6BAExB,WACE,GAAIC,GAAKnC,SAASC,cAAc,SAChCkC,GAAGC,IAAM,6DACTD,EAAGE,KAAO,kBACVF,EAAGG,MAAQ,MACX,IAAIC,GAAIvC,SAASG,qBAAqB,UAAU,EAChDoC,GAAE9B,WAAWC,aAAayB,EAAII,MAEhCC,OAAOC,GAAG,WAAWA,GAAGC,EAAEC,KAAKC,YAAYH,GAAGC,KAAKD,GAAGI,GAAG,GAAIC,MAC7DL,GAAG,SAAS,8BAA8B,QAAQA,GAAG,OAAO","file":"inline.js","sourcesContent":["/*! loadCSS: load a CSS file asynchronously. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT */\n(function(w){\n\t\"use strict\";\n\t/* exported loadCSS */\n\tvar loadCSS = function( href, before, media ){\n\t\t// Arguments explained:\n\t\t// `href` [REQUIRED] is the URL for your CSS file.\n\t\t// `before` [OPTIONAL] is the element the script should use as a reference for injecting our stylesheet <link> before\n\t\t\t// By default, loadCSS attempts to inject the link after the last stylesheet or script in the DOM. However, you might desire a more specific location in your document.\n\t\t// `media` [OPTIONAL] is the media type or query of the stylesheet. By default it will be 'all'\n\t\tvar doc = w.document;\n\t\tvar ss = doc.createElement( \"link\" );\n\t\tvar ref;\n\t\tif( before ){\n\t\t\tref = before;\n\t\t}\n\t\telse {\n\t\t\tvar refs = ( doc.body || doc.getElementsByTagName( \"head\" )[ 0 ] ).childNodes;\n\t\t\tref = refs[ refs.length - 1];\n\t\t}\n\n\t\tvar sheets = doc.styleSheets;\n\t\tss.rel = \"stylesheet\";\n\t\tss.href = href;\n\t\t// temporarily set media to something inapplicable to ensure it'll fetch without blocking render\n\t\tss.media = \"only x\";\n\n\t\t// wait until body is defined before injecting link. This ensures a non-blocking load in IE11.\n\t\tfunction ready( cb ){\n\t\t\tif( doc.body ){\n\t\t\t\treturn cb();\n\t\t\t}\n\t\t\tsetTimeout(function(){\n\t\t\t\tready( cb );\n\t\t\t});\n\t\t}\n\t\t// Inject link\n\t\t\t// Note: the ternary preserves the existing behavior of \"before\" argument, but we could choose to change the argument to \"after\" in a later release and standardize on ref.nextSibling for all refs\n\t\t\t// Note: `insertBefore` is used instead of `appendChild`, for safety re: http://www.paulirish.com/2011/surefire-dom-element-insertion/\n\t\tready( function(){\n\t\t\tref.parentNode.insertBefore( ss, ( before ? ref : ref.nextSibling ) );\n\t\t});\n\t\t// A method (exposed on return object for external use) that mimics onload by polling until document.styleSheets until it includes the new sheet.\n\t\tvar onloadcssdefined = function( cb ){\n\t\t\tvar resolvedHref = ss.href;\n\t\t\tvar i = sheets.length;\n\t\t\twhile( i-- ){\n\t\t\t\tif( sheets[ i ].href === resolvedHref ){\n\t\t\t\t\treturn cb();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetTimeout(function() {\n\t\t\t\tonloadcssdefined( cb );\n\t\t\t});\n\t\t};\n\n\t\tfunction loadCB(){\n\t\t\tif( ss.addEventListener ){\n\t\t\t\tss.removeEventListener( \"load\", loadCB );\n\t\t\t}\n\t\t\tss.media = media || \"all\";\n\t\t}\n\n\t\t// once loaded, set link's media back to `all` so that the stylesheet applies once it loads\n\t\tif( ss.addEventListener ){\n\t\t\tss.addEventListener( \"load\", loadCB);\n\t\t}\n\t\tss.onloadcssdefined = onloadcssdefined;\n\t\tonloadcssdefined( loadCB );\n\t\treturn ss;\n\t};\n\t// commonjs\n\tif( typeof exports !== \"undefined\" ){\n\t\texports.loadCSS = loadCSS;\n\t}\n\telse {\n\t\tw.loadCSS = loadCSS;\n\t}\n}( typeof global !== \"undefined\" ? global : this ));\n\n/*! CSS rel=preload polyfill. Depends on loadCSS function. [c]2016 @scottjehl, Filament Group, Inc. Licensed MIT  */\n(function( w ){\n  // rel=preload support test\n  if( !w.loadCSS ){\n    return;\n  }\n  var rp = loadCSS.relpreload = {};\n  rp.support = function(){\n    try {\n      return w.document.createElement( \"link\" ).relList.supports( \"preload\" );\n    } catch (e) {\n      return false;\n    }\n  };\n\n  // loop preload links and fetch using loadCSS\n  rp.poly = function(){\n    var links = w.document.getElementsByTagName( \"link\" );\n    for( var i = 0; i < links.length; i++ ){\n      var link = links[ i ];\n      if( link.rel === \"preload\" && link.getAttribute( \"as\" ) === \"style\" ){\n        w.loadCSS( link.href, link );\n        link.rel = null;\n      }\n    }\n  };\n\n  // if link[rel=preload] is not supported, we must fetch the CSS manually using loadCSS\n  if( !rp.support() ){\n    rp.poly();\n    var run = w.setInterval( rp.poly, 300 );\n    if( w.addEventListener ){\n      w.addEventListener( \"load\", function(){\n        w.clearInterval( run );\n      } );\n    }\n    if( w.attachEvent ){\n      w.attachEvent( \"onload\", function(){\n        w.clearInterval( run );\n      } )\n    }\n  }\n}( this ));\n\n/*! Google Fonts and Analytics */\nWebFontConfig = {\n  google: { families: [ 'Fira+Mono:400,700:latin' ] }\n};\n(function() {\n  var wf = document.createElement('script');\n  wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1/webfont.js';\n  wf.type = 'text/javascript';\n  wf.async = 'true';\n  var s = document.getElementsByTagName('script')[0];\n  s.parentNode.insertBefore(wf, s);\n})();\nwindow.ga=function(){ga.q.push(arguments)};ga.q=[];ga.l=+new Date;\nga('create','{{ .Site.GoogleAnalytics }}','auto');ga('send','pageview');"],"sourceRoot":"/source/"}